name: Build, Publish and Release

on:
  push:
    branches: [main, development]
    tags: ["v*.*.*"]
  pull_request:
    branches: [main, development]

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov flake8

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          pytest --cov=app tests/

  integration-test:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for testing
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: medication-tracker:test
          build-args: |
            VERSION=test-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Ensure integration test script is executable
        run: chmod +x scripts/integration-test.sh

      - name: Run integration tests
        run: ./scripts/integration-test.sh

  docker-pr:
    needs: [test, integration-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set PR Docker tags
        id: pr_tags
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "tags=skjall/medication-tracker:pr-${PR_NUMBER},ghcr.io/${REPO_NAME}:pr-${PR_NUMBER}" >> $GITHUB_OUTPUT

      - name: Add metadata labels to images
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            skjall/medication-tracker
            ghcr.io/${{ github.repository }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=Medication Tracker Application (PR #${{ github.event.pull_request.number }})
            org.opencontainers.image.licenses=MIT

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.pr_tags.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=pr-${{ github.event.pull_request.number }}
          cache-from: type=registry,ref=skjall/medication-tracker:buildcache
          cache-to: type=registry,ref=skjall/medication-tracker:buildcache,mode=max

  docker:
    needs: [test, integration-test]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Check if should skip (for main branch)
        id: check_skip
        if: github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.sha;
            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: sha
            });
            
            if (prs.data.length > 0) {
              const pr = prs.data[0];
              const hasSkipLabel = pr.labels.some(label => label.name === 'skip-release');
              if (hasSkipLabel) {
                console.log(`PR #${pr.number} has skip-release label - will skip Docker build and release`);
                core.setOutput('skip', 'true');
                
                // Add summary
                await core.summary
                  .addHeading('⏭️ Release Skipped', 3)
                  .addRaw(`PR #${pr.number} was merged with the \`skip-release\` label.`)
                  .addBreak()
                  .addRaw('**What was skipped:**')
                  .addList([
                    '❌ Docker image build and push',
                    '❌ Git tag creation', 
                    '❌ GitHub release creation'
                  ])
                  .addBreak()
                  .addRaw('**This is typically used for:**')
                  .addList([
                    'Workflow fixes',
                    'Documentation updates',
                    'Internal tooling changes'
                  ])
                  .write();
              } else {
                core.setOutput('skip', 'false');
              }
            } else {
              core.setOutput('skip', 'false');
            }

      - name: Exit if skip-release
        if: steps.check_skip.outputs.skip == 'true'
        run: |
          echo "Skipping Docker build and release due to skip-release label"
          exit 0

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get app version for main branch
        # Uses a specific, predictable version pattern for main branch
        # This reads APP_VERSION from a version.txt file in the repo
        id: app_version
        if: github.ref == 'refs/heads/main'
        run: |
          VERSION=$(cat version.txt)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using explicit version: ${VERSION} for main branch"

      - name: Generate dev version for development branch
        # Creates a timestamp-based version for development branch
        id: dev_version
        if: github.ref == 'refs/heads/development'
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M)
          SHORT_SHA=$(git rev-parse --short HEAD)
          DEV_VERSION="dev-${TIMESTAMP}-${SHORT_SHA}"
          echo "version=${DEV_VERSION}" >> $GITHUB_OUTPUT
          echo "Using auto-generated version: ${DEV_VERSION} for development branch"

      - name: Set Docker tags
        id: docker_tags
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Main branch gets version from file and "latest" tag
            VERSION="${{ steps.app_version.outputs.version }}"
            echo "tags=skjall/medication-tracker:latest,skjall/medication-tracker:${VERSION},ghcr.io/${REPO_NAME}:latest,ghcr.io/${REPO_NAME}:${VERSION}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
            # Development branch gets dev- prefix with timestamp and commit hash
            DEV_VERSION="${{ steps.dev_version.outputs.version }}"
            echo "tags=skjall/medication-tracker:${DEV_VERSION},skjall/medication-tracker:development,ghcr.io/${REPO_NAME}:${DEV_VERSION},ghcr.io/${REPO_NAME}:development" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Tag pushes
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "tags=skjall/medication-tracker:${VERSION},ghcr.io/${REPO_NAME}:${VERSION}" >> $GITHUB_OUTPUT
          else
            # Other branches just get the branch name
            BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's/[\/]/-/g')
            echo "tags=skjall/medication-tracker:${BRANCH},ghcr.io/${REPO_NAME}:${BRANCH}" >> $GITHUB_OUTPUT
          fi

      - name: Add metadata labels to images
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            skjall/medication-tracker
            ghcr.io/${{ github.repository }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=Medication Tracker Application
            org.opencontainers.image.licenses=MIT

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_tags.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.app_version.outputs.version || steps.dev_version.outputs.version || github.ref_name }}
          cache-from: type=registry,ref=skjall/medication-tracker:buildcache
          cache-to: type=registry,ref=skjall/medication-tracker:buildcache,mode=max

  create-release:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from file
        id: get_version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git tag -a "v${{ steps.get_version.outputs.VERSION }}" -m "Release v${{ steps.get_version.outputs.VERSION }}"
          git push origin "v${{ steps.get_version.outputs.VERSION }}"

      - name: Wait for tag workflow to complete
        run: |
          echo "Waiting for tag workflow to complete..."
          sleep 60  # Give time for the tag-triggered workflow to start

      - name: Generate changelog
        id: changelog
        run: |
          # Extract all commit messages since last tag (excluding the one we just created)
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            # If there's no previous tag, get all commits
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges)
          else
            # Get commits between previous tag and current tag
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges ${PREVIOUS_TAG}..HEAD)
          fi
          # Save changelog to output in a format that works with GitHub Actions
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Release v${{ steps.get_version.outputs.VERSION }}
          body: |
            ## What's Changed

            ${{ steps.changelog.outputs.CHANGELOG }}

            ## Docker Images

            - DockerHub: `skjall/medication-tracker:${{ steps.get_version.outputs.VERSION }}`
            - GitHub Container Registry: `ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.VERSION }}`

            ## How to use

            ```bash
            # Pull from DockerHub
            docker pull skjall/medication-tracker:${{ steps.get_version.outputs.VERSION }}

            # Pull from GitHub Container Registry
            docker pull ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.VERSION }}
            ```
          draft: false
          prerelease: false
