name: Dev Image Cleanup

on:
  push:
    branches: [development]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      keep_count:
        description: 'Number of recent dev images to keep'
        required: false
        default: '5'
        type: string

permissions:
  packages: write

jobs:
  cleanup-old-dev-images:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old dev images from GitHub Container Registry
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          KEEP_COUNT=${{ inputs.keep_count || '5' }}
          
          echo "Cleaning up old dev images from ghcr.io/${REPO_NAME}"
          echo "Will keep the ${KEEP_COUNT} most recent dev-* tagged images"
          
          # Get all package versions with dev- tags
          echo "Fetching all dev-* tagged versions..."
          
          # Get all versions and filter for dev- tags
          ALL_VERSIONS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            --paginate \
            "/user/packages/container/$(basename ${REPO_NAME})/versions" \
            --jq '.[] | select(.metadata.container.tags[] | startswith("dev-")) | {id: .id, tags: .metadata.container.tags, created_at: .created_at}' \
            2>/dev/null || echo "[]")
          
          # Parse and sort versions by creation date (newest first)
          echo "$ALL_VERSIONS" | jq -s 'sort_by(.created_at) | reverse' > versions.json
          
          # Count total dev versions
          TOTAL_COUNT=$(jq length versions.json)
          echo "Found ${TOTAL_COUNT} total dev-* tagged images"
          
          if [ "$TOTAL_COUNT" -le "$KEEP_COUNT" ]; then
            echo "Only ${TOTAL_COUNT} dev images exist, keeping all (threshold: ${KEEP_COUNT})"
            exit 0
          fi
          
          # Get IDs of versions to delete (skip the most recent KEEP_COUNT)
          DELETE_IDS=$(jq -r ".[$KEEP_COUNT:][].id" versions.json)
          DELETE_COUNT=$(echo "$DELETE_IDS" | wc -l | tr -d ' ')
          
          echo "Will delete ${DELETE_COUNT} old dev images"
          
          # Delete old versions
          for VERSION_ID in $DELETE_IDS; do
            # Get tags for this version for logging
            TAGS=$(jq -r ".[] | select(.id == $VERSION_ID) | .tags | join(\", \")" versions.json)
            echo "Deleting version ${VERSION_ID} with tags: ${TAGS}"
            
            gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/user/packages/container/$(basename ${REPO_NAME})/versions/${VERSION_ID}" \
              && echo "  ✓ Deleted successfully" \
              || echo "  ⚠ Failed to delete"
          done
          
          echo "Cleanup complete!"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old dev images from Docker Hub
        continue-on-error: true
        run: |
          KEEP_COUNT=${{ inputs.keep_count || '5' }}
          
          echo "Attempting to clean up old dev images from Docker Hub"
          echo "Will keep the ${KEEP_COUNT} most recent dev-* tagged images"
          
          # Authenticate with Docker Hub
          LOGIN_PAYLOAD=$(echo '{"username": "'${{ secrets.DOCKERHUB_USERNAME }}'", "password": "'${{ secrets.DOCKERHUB_TOKEN }}'"}')
          
          TOKEN=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "${LOGIN_PAYLOAD}" \
            "https://hub.docker.com/v2/users/login/" | jq -r .token)
          
          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
            echo "⚠ Failed to authenticate with Docker Hub - skipping Docker Hub cleanup"
            exit 0
          fi
          
          # Get all tags from Docker Hub
          echo "Fetching tags from Docker Hub..."
          TAGS_RESPONSE=$(curl -s -X GET \
            -H "Authorization: JWT ${TOKEN}" \
            "https://hub.docker.com/v2/repositories/skjall/medication-tracker/tags/?page_size=100")
          
          # Filter for dev- tags and sort by last_updated
          echo "$TAGS_RESPONSE" | jq -r '.results[] | select(.name | startswith("dev-")) | {name: .name, last_updated: .last_updated}' | \
            jq -s 'sort_by(.last_updated) | reverse' > dockerhub_tags.json
          
          TOTAL_COUNT=$(jq length dockerhub_tags.json)
          echo "Found ${TOTAL_COUNT} dev-* tags on Docker Hub"
          
          if [ "$TOTAL_COUNT" -le "$KEEP_COUNT" ]; then
            echo "Only ${TOTAL_COUNT} dev images exist, keeping all (threshold: ${KEEP_COUNT})"
            exit 0
          fi
          
          # Get tags to delete (skip the most recent KEEP_COUNT)
          DELETE_TAGS=$(jq -r ".[$KEEP_COUNT:][].name" dockerhub_tags.json)
          DELETE_COUNT=$(echo "$DELETE_TAGS" | wc -l | tr -d ' ')
          
          echo "Will attempt to delete ${DELETE_COUNT} old dev images from Docker Hub"
          
          # Delete old tags
          for TAG in $DELETE_TAGS; do
            echo "Attempting to delete Docker Hub tag: ${TAG}"
            
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
              -H "Accept: application/json" \
              -H "Authorization: JWT ${TOKEN}" \
              "https://hub.docker.com/v2/repositories/skjall/medication-tracker/tags/${TAG}/")
            
            case $HTTP_CODE in
              204|200)
                echo "  ✓ Deleted successfully"
                ;;
              404)
                echo "  ℹ Already deleted"
                ;;
              *)
                echo "  ⚠ Failed (HTTP ${HTTP_CODE}) - known Docker Hub API issue"
                ;;
            esac
          done
          
          echo "Docker Hub cleanup attempt complete"

      - name: Summary
        if: always()
        run: |
          KEEP_COUNT=${{ inputs.keep_count || '5' }}
          echo "### Dev Image Cleanup Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Configuration:" >> $GITHUB_STEP_SUMMARY
          echo "- Retention: Keep ${KEEP_COUNT} most recent dev images" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Cleaned up old dev-* tagged images from:" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Container Registry: \`ghcr.io/${{ github.repository }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Hub: \`skjall/medication-tracker\` (if API permits)" >> $GITHUB_STEP_SUMMARY