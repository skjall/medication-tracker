"""Add order item fulfillment status

Revision ID: 385e8421ca41
Revises: 8b5d249f8899
Create Date: 2025-08-13 09:55:15.341671

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '385e8421ca41'
down_revision: Union[str, None] = '8b5d249f8899'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if orders_new table exists before trying to drop it
    from sqlalchemy import inspect, create_engine
    from alembic import context
    
    # Get the database connection
    connection = context.get_context().connection
    inspector = inspect(connection)
    
    # Only drop orders_new if it exists
    if 'orders_new' in inspector.get_table_names():
        op.drop_table('orders_new')
    
    # Skip the medications alter column for SQLite - it doesn't support DROP DEFAULT
    # This change is cosmetic only and doesn't affect functionality
    
    # Check if columns already exist before adding them
    existing_columns = [col['name'] for col in inspector.get_columns('order_items')]
    
    if 'fulfillment_status' not in existing_columns:
        # Add fulfillment status to order items
        op.add_column('order_items', sa.Column('fulfillment_status', sa.String(length=20), nullable=True))
        op.add_column('order_items', sa.Column('fulfillment_notes', sa.Text(), nullable=True))
        op.add_column('order_items', sa.Column('fulfilled_quantity', sa.Integer(), nullable=True))
        op.add_column('order_items', sa.Column('fulfilled_at', sa.DateTime(), nullable=True))
        
        # Set default status for existing items based on order status
        op.execute("""
            UPDATE order_items 
            SET fulfillment_status = CASE 
                WHEN (SELECT status FROM orders WHERE orders.id = order_items.order_id) = 'fulfilled' THEN 'fulfilled'
                ELSE 'pending'
            END
            WHERE fulfillment_status IS NULL
        """)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if columns exist before trying to drop them
    from sqlalchemy import inspect
    from alembic import context
    
    connection = context.get_context().connection
    inspector = inspect(connection)
    existing_columns = [col['name'] for col in inspector.get_columns('order_items')]
    
    # Remove fulfillment columns from order items if they exist
    if 'fulfilled_at' in existing_columns:
        op.drop_column('order_items', 'fulfilled_at')
    if 'fulfilled_quantity' in existing_columns:
        op.drop_column('order_items', 'fulfilled_quantity')
    if 'fulfillment_notes' in existing_columns:
        op.drop_column('order_items', 'fulfillment_notes')
    if 'fulfillment_status' in existing_columns:
        op.drop_column('order_items', 'fulfillment_status')
    
    # Skip the medications alter column for SQLite
    # ### end Alembic commands ###
